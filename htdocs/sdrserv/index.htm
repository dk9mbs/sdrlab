<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">

  <title>DK9MBS SDR Server</title>
  <meta name="description" content="DK9MBS SDR Server">
  <meta name="author" content="dk9mbs">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!--<link rel="stylesheet" href="css/styles.css?v=1.0">-->
  <script src="/js/index.js"></script>
</head>

<body>
  <!--<script src="js/scripts.js"></script>-->
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js"></script>

  <!-- 
    bootstrap-vue 
    https://bootstrap-vue.js.org/docs/reference/starter-templates/
  -->

  <link
      type="text/css"
      rel="stylesheet"
      href="https://unpkg.com/bootstrap/dist/css/bootstrap.min.css"
    />
    <link
      type="text/css"
      rel="stylesheet"
      href="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css"
    />
  <script src="https://unpkg.com/babel-polyfill@latest/dist/polyfill.min.js"></script>
  <script src="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>
  <!-- end boostrap-vue -->

<div id="app">

  <b-navbar toggleable="lg" type="dark" variant="dark">
    <b-navbar-brand href="#">DK9MBS</b-navbar-brand>

    <b-navbar-toggle target="nav-collapse"></b-navbar-toggle>

    <b-collapse id="nav-collapse" is-nav>
      <b-navbar-nav>
        <b-nav-item href="#">dk9mbs.de</b-nav-item>
      </b-navbar-nav>

      <!-- Right aligned nav items -->
      <b-navbar-nav class="ml-auto">
        <!-- <b-nav-form>
          <b-form-input size="sm" class="mr-sm-2" placeholder="Search"></b-form-input>
          <b-button size="sm" class="my-2 my-sm-0" type="submit">Search</b-button>
        </b-nav-form> -->

        <b-nav-item-dropdown text="Lang" right>
          <b-dropdown-item href="#">DE</b-dropdown-item>
        </b-nav-item-dropdown>

        <b-nav-item-dropdown right>
          <!-- Using 'button-content' slot -->
          <template slot="button-content"><em>User</em></template>
          <b-dropdown-item href="#">Sign Out</b-dropdown-item>
        </b-nav-item-dropdown>
      </b-navbar-nav>
    </b-collapse>
  </b-navbar>


  <b-alert
    :show="alert.dismissCountDown"
    dismissible
    v-bind:variant="alert.type"
    @dismissed="alert.dismissCountDown=0"
    @dismiss-count-down="countDownChanged">

  <p>{% raw %}{{ alert.message }}{% endraw %}</p>

  <b-progress
    v-bind:variant="alert.type"
    :max="alert.dismissSecs"
    :value="alert.dismissCountDown"
    height="4px">
  </b-progress>
</b-alert>

  <b-tabs>

      <b-tab title="Hardware" active>
    <!-- Start content -->
    <table style="margin-top: 10px; margin-bottom: 10px; ">
        <tr v-for="n in keys">
        <td>{% raw %}{{ n.label }}{% endraw %}</td>
        <td><input v-model="config[n.name]"></td>
        <td>{% raw %}{{ n.unit }}{% endraw %}</td>
        </tr>
        </table>
        
        <div>
        <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(-1e7)">-10Mhz</b-button>
        <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(1e7)">+10Mhz</b-button>
        </div>
        
        <div>
        <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(-1e6)">-1Mhz</b-button>
        <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(1e6)">+1Mhz</b-button>
        </div>
        
        <div>
          <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(-1e5)">-100Khz</b-button>
          <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(1e5)">+100Khz</b-button>
        </div>
          
        <div>
          <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(-1e4)">-10Khz</b-button>
          <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(1e4)">+10Khz</b-button>
        </div>
          
        <div>
          <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(-1e3)">-1Khz</b-button>
          <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="setfreqoffset(1e3)">+1Khz</b-button>
        </div>
          
        
        <b-button style="margin-bottom: 10px;width: 125px;" v-on:click="sethardware" variant="danger">Hardware</b-button>
        <!-- end content -->      
      </b-tab>
  
      <b-tab title="IQ Stream">
          <b-container class="bv-example-row">
              <b-row>
                <b-col>Host</b-col>
                <b-col>{% raw %}{{ iqstreamconfig['host'] }}{% endraw %}</b-col>
              </b-row>
              <b-row>
                  <b-col>Port</b-col>
                  <b-col>{% raw %}{{ iqstreamconfig['port'] }}{% endraw %}</b-col>
                </b-row>
              </b-container>
        </b-tab>
  
      <b-tab title="Login">
        <div>
          <b-input-group prepend="Username" class="mt-3">
            <b-form-input type="text" v-model="auth.username"></b-form-input>
          </b-input-group>

          <b-input-group prepend="Password" class="mt-3">
            <b-form-input type="password" v-model="auth.password"></b-form-input>
          </b-input-group>

          <b-button style="margin-top: 10px;" v-on:click="login" variant="info">Login</b-button>
        </div>



      </b-tab>
    
    </b-tabs>


  


<script>
vue = new Vue({
  el: '#app',
  data () {
    return {
      config: {},
      iqstreamconfig: {},
      keys: [{'name': 'frequency', 'unit':'Hz', 'label':'Frequency'},
        {'name': 'gain','unit':'dB', 'label':'Gain'}, 
        {'name': 'output_block_size','unit':'Bytes', 'label':'Blocksize'}, 
        {'name': 'samplerate', 'unit':'S/s', 'label':'Samplerate'},
        {'name': 'outputfile', 'unit':'--', 'label':'Output'}],
        alert: {message: null, type: 'warning',dismissSecs: 10,dismissCountDown: 0,showDismissibleAlert: false}, 
        auth: {username: 'guest', password:null},
    }
  },
  mounted () {

    axios.get('/api/v1.0/config/hardwareconfig')
      .then( (response) => {
        this.config = response.data
        this.showAlert('Hardware Config has been loaded!', 'success');
      } 
    ) 
    
    axios.get('/api/v1.0/config/iqstreamconfig').then( (response) => {
        this.iqstreamconfig=response.data;
        this.showAlert('IQ Stream Config has been loaded!', 'success');
      }
    ).catch( (response) => { this.showAlert('Cannot load iqstreamconfig!!!', 'danger') } )
  },
   filters:{
      getconfigkey: function(value,key){
	if(value==null) return null;
        return value[key];
      }
    },
  methods: {
    login: function(username, password) {
      var config = { headers: {  
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'}
             }

      axios.post('/api/v1.0/auth/login', {}, config).then( (response) => {
        this.showAlert('logged on','success');
      })
      .catch( (response) => {
        this.showAlert('Username or password are wrong!','danger');
      })
      
    },
    sethardware: function (event) {
        var config = { headers: {  
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'}
             }

        axios.post('/api/v1.0/config/hardware', JSON.stringify(this.config), config)
	        .then( (response) => { 
            console.log(response.status); 
            this.showAlert('Hardware settings has been changed!', 'success') 
          })
	        .catch( function(error) { console.log( error.response) });
    },
    setfreqoffset: function (offset, event) {
      this.config.frequency = (this.config.frequency)*1 + (offset)*1;
    },
    countDownChanged: function(dismissCountDown) {
      this.alert.dismissCountDown = dismissCountDown
    },
    showAlert: function(message, type='warning') {
      this.alert.message=message;
      this.alert.type=type;
      this.alert.dismissCountDown = this.alert.dismissSecs;
    }
  }
})

connectWebSocket();

</script>




</body>
</html>
